
.. _program_listing_file_src_translator_response.h:

Program Listing for File response.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_translator_response.h>` (``src/translator/response.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef SRC_BERGAMOT_RESPONSE_H_
   #define SRC_BERGAMOT_RESPONSE_H_
   
   #include "data/alignment.h"
   #include "data/types.h"
   #include "definitions.h"
   #include "sentence_ranges.h"
   #include "translator/beam_search.h"
   
   #include <cassert>
   #include <string>
   #include <vector>
   
   namespace marian {
   namespace bergamot {
   
   struct Point {
     size_t src; 
     size_t tgt; 
     float prob; 
   };
   
   typedef std::vector<Point> Alignment;
   
   struct Quality {
     float sequence;
     std::vector<float> word;
   };
   
   struct Response {
   
   public:
     Response(){};
   
     // Move constructor.
     Response(Response &&other)
         : source(std::move(other.source)), target(std::move(other.target)),
           alignments(std::move(other.alignments)),
           qualityScores(std::move(other.qualityScores)){};
   
     // The following copy bans are not strictly required anymore since Annotation
     // is composed of the ByteRange primitive (which was previously string_view
     // and required to be bound to string), but makes movement efficient by
     // banning these letting compiler complain about copies.
   
     Response(const Response &) = delete;
     Response &operator=(const Response &) = delete;
   
   
     const size_t size() const { return source.numSentences(); }
   
     AnnotatedText source;
   
     AnnotatedText target;
   
     std::vector<Quality> qualityScores;
   
     std::vector<Alignment> alignments;
   };
   } // namespace bergamot
   } // namespace marian
   
   #endif // SRC_BERGAMOT_RESPONSE_H_
