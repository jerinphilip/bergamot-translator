
.. _program_listing_file_src_translator_response_builder.h:

Program Listing for File response_builder.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_translator_response_builder.h>` (``src/translator/response_builder.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef SRC_BERGAMOT_RESPONSE_BUILDER_H_
   #define SRC_BERGAMOT_RESPONSE_BUILDER_H_
   
   #include "data/types.h"
   #include "response.h"
   
   // For now we will work with this, to avoid complaints another structure is hard
   // to operate with.
   
   typedef marian::Ptr<marian::Options> RequestParams;
   // typedef TranslationRequest RequestParams;
   
   namespace marian {
   namespace bergamot {
   
   
   class ResponseBuilder {
   public:
     //  @param [in] promise: promise to set with the constructed Response
     ResponseBuilder(RequestParams params, AnnotatedText &&source,
                     std::vector<Ptr<Vocab const>> &vocabs,
                     std::promise<Response> &&promise)
         : params_(params), source_(std::move(source)), vocabs_(&vocabs),
           promise_(std::move(promise)) {}
   
     void operator()(Histories &&histories) {
       // TODO(jerinphilip) load RequestParams into options and turn build
       // functions on or off.
       // params_ is unused, but we can try something here.
       ABORT_IF(source_.numSentences() != histories.size(),
                "Mismatch in source and translated sentences");
       Response response;
   
       // Move source_ into response.
       response.source = std::move(source_);
   
       // Should be after source is set
       buildTranslatedText(histories, response);
   
       // Should always be after buildTranslatedText
       buildQualityScores(histories, response);
   
       buildAlignments(histories, response);
   
       // Once complete, set promise.
       promise_.set_value(std::move(response));
     }
   
   private:
     void buildQualityScores(Histories &histories, Response &response);
   
     void buildAlignments(Histories &histories, Response &response);
   
     void buildTranslatedText(Histories &histories, Response &response);
   
     // Data members are context/curried args for the functor.
   
     RequestParams params_;
     std::vector<Ptr<Vocab const>> *vocabs_; // vocabs are required for decoding
                                             // and any source validation checks.
     std::promise<Response> promise_; //  To be set when callback triggered and
                                      //  after Response constructed.
     AnnotatedText source_;
   };
   } // namespace bergamot
   } // namespace marian
   
   #endif //  SRC_BERGAMOT_RESPONSE_BUILDER_H_
