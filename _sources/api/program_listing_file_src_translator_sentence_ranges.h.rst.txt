
.. _program_listing_file_src_translator_sentence_ranges.h:

Program Listing for File sentence_ranges.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_translator_sentence_ranges.h>` (``src/translator/sentence_ranges.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef BERGAMOT_SENTENCE_RANGES_H_
   #define BERGAMOT_SENTENCE_RANGES_H_
   
   #include "data/types.h"
   #include <cassert>
   #include <utility>
   #include <vector>
   
   namespace marian {
   namespace bergamot {
   
   struct ByteRange {
     size_t begin;
     size_t end;
     const size_t size() const { return end - begin; }
   };
   
   class Annotation {
   public:
     Annotation() {
       // The -1-th sentence ends at 0.
       sentenceEndIds_.push_back(0);
     }
   
     size_t numSentences() const { return sentenceEndIds_.size() - 1; }
   
     size_t numWords(size_t sentenceIdx) const;
   
     void addSentence(std::vector<ByteRange> &sentence);
   
     ByteRange word(size_t sentenceIdx, size_t wordIdx) const;
   
     ByteRange sentence(size_t sentenceIdx) const;
   
   private:
     std::vector<ByteRange> flatByteRanges_;
   
     std::vector<size_t> sentenceEndIds_;
   };
   
   
   struct AnnotatedText {
   public:
     std::string text;      
     Annotation annotation; 
   
     AnnotatedText() {}
   
     AnnotatedText(std::string &&text) : text(std::move(text)){};
   
     const size_t numSentences() const { return annotation.numSentences(); }
   
     const size_t numWords(size_t sentenceIdx) const {
       return annotation.numWords(sentenceIdx);
     }
   
     void appendSentence(std::string prefix, std::string &reference,
                         std::vector<string_view> &wordRanges);
   
     void addSentence(std::vector<string_view> &wordRanges);
   
     void addSentence(std::vector<string_view>::iterator begin,
                      std::vector<string_view>::iterator end);
   
     string_view word(size_t sentenceIdx, size_t wordIdx) const;
   
     string_view sentence(size_t sentenceIdx) const;
   
   
     string_view gap(size_t sentenceIdx) const;
   
     ByteRange wordAsByteRange(size_t sentenceIdx, size_t wordIdx) const;
   
     ByteRange sentenceAsByteRange(size_t sentenceIdx) const;
   
   private:
     string_view asStringView(const ByteRange &byteRange) const;
   };
   
   } // namespace bergamot
   } // namespace marian
   
   #endif //  BERGAMOT_SENTENCE_RANGES_H_
