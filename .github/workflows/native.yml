name: default
'on':
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
jobs:
  ubuntu_full:
    name: Ubuntu full
    env:
      gcc: 8
      cmake: -DCOMPILE_TESTS=on -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
      unittests: ${{ true }}
      ccache_dir: "${{ github.workspace }}/.ccache"
      cache_cmd: "bash ${GITHUB_WORKSPACE}/scripts/ci/compiler-hash.sh %compiler%"
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: |-
        sudo apt-get update
        sudo apt-get install -y \
          libgoogle-perftools-dev libprotobuf-dev protobuf-compiler \
          libboost-all-dev g++-${{ env.gcc }} ccache
    - name: Install MKL
      run: |-
        wget -qO- "https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB" | sudo apt-key add -
        sudo sh -c "echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get update -o Dir::Etc::sourcelist="/etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088
    - name: Generate ccache_vars for ccache based on machine
      shell: bash
      id: ccache_vars
      run: |-
        echo "::set-output name=hash::$(${{ env.cache_cmd }})"
        echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"
    - name: Cache-op for build-cache through ccache
      uses: actions/cache@v2
      with:
        path: ${{ env.ccache_dir }}
        key: ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
        restore-keys: |-
          ccache
          ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
          ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}
          ccache-${{ github.job }}
    - name: ccache environment setup
      run: |-
        echo "CCACHE_COMPILER_CHECK=${{ env.cache_cmd }}" >> $GITHUB_ENV
        echo "CCACHE_BASE_DIR=${{ github.workspace }}" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
        echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=50M" >> $GITHUB_ENV
    - name: ccache prolog
      run: |-
        ccache -s # Print current cache stats
        ccache -z # Zero cache entry
    - name: cmake
      run: |-
        mkdir -p build
        cd build
        CC=/usr/bin/gcc-${{ env.gcc }} CXX=/usr/bin/g++-${{ env.gcc }} CUDAHOSTCXX=/usr/bin/g++-${{ env.gcc }} \
        cmake -L .. ${{ env.cmake }}
    - name: Build from source
      working-directory: build
      run: make -j2
    - name: ccache epilog
      run: 'ccache -s # Print current cache stats'
    - name: Print Versions
      working-directory: build
      run: ./app/bergamot-translator-app --version
    - name: Run unit tests
      working-directory: build
      run: make test
      if: ${{ env.unittests }} == 'true'
    - name: Install regression-test framework (BRT)
      working-directory: bergamot-translator-tests
      run: make install
    - name: Run regression-tests (BRT)
      working-directory: bergamot-translator-tests
      run: MARIAN=../build ./run_brt.sh ${{ env.brt_tags }}
    - name: Upload regression-tests artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: brt-${{ github.job }}
        path: |-
          bergamot-translator-tests/**/*.expected
          bergamot-translator-tests/**/*.log
          bergamot-translator-tests/**/*.out
  ubuntu_full_fresh:
    name: Ubuntu full (fresh build)
    env:
      gcc: 8
      cmake: -DCOMPILE_TESTS=on
      unittests: ${{ true }}
    runs-on: ubuntu-18.04
    if: ${{ needs.ubuntu_full.result }} == 'failure'
    needs: ubuntu_full
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: |-
        sudo apt-get update
        sudo apt-get install -y \
          libgoogle-perftools-dev libprotobuf-dev protobuf-compiler \
          libboost-all-dev g++-${{ env.gcc }} ccache
    - name: Install MKL
      run: |-
        wget -qO- "https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB" | sudo apt-key add -
        sudo sh -c "echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get update -o Dir::Etc::sourcelist="/etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088
    - name: cmake
      run: |-
        mkdir -p build
        cd build
        CC=/usr/bin/gcc-${{ env.gcc }} CXX=/usr/bin/g++-${{ env.gcc }} CUDAHOSTCXX=/usr/bin/g++-${{ env.gcc }} \
        cmake -L .. ${{ env.cmake }}
    - name: Build from source
      working-directory: build
      run: make -j2
    - name: Print Versions
      working-directory: build
      run: ./app/bergamot-translator-app --version
    - name: Run unit tests
      working-directory: build
      run: make test
      if: ${{ env.unittests }} == 'true'
    - name: Install regression-test framework (BRT)
      working-directory: bergamot-translator-tests
      run: make install
    - name: Run regression-tests (BRT)
      working-directory: bergamot-translator-tests
      run: MARIAN=../build ./run_brt.sh ${{ env.brt_tags }}
    - name: Upload regression-tests artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: brt-${{ github.job }}
        path: |-
          bergamot-translator-tests/**/*.expected
          bergamot-translator-tests/**/*.log
          bergamot-translator-tests/**/*.out
  ubuntu_minimal:
    name: Ubuntu minimal
    env:
      gcc: 8
      cmake: -DCOMPILE_TESTS=off -DUSE_WASM_COMPATIBLE_SOURCE=on -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
      brt_tags: "'#wasm'"
      unittests: ${{ false }}
      ccache_dir: "${{ github.workspace }}/.ccache"
      cache_cmd: "bash ${GITHUB_WORKSPACE}/scripts/ci/compiler-hash.sh %compiler%"
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: |-
        sudo apt-get update
        sudo apt-get install -y \
          libgoogle-perftools-dev libprotobuf-dev protobuf-compiler \
          libboost-all-dev g++-${{ env.gcc }} ccache
    - name: Install MKL
      run: |-
        wget -qO- "https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB" | sudo apt-key add -
        sudo sh -c "echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get update -o Dir::Etc::sourcelist="/etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088
    - name: Generate ccache_vars for ccache based on machine
      shell: bash
      id: ccache_vars
      run: |-
        echo "::set-output name=hash::$(${{ env.cache_cmd }})"
        echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"
    - name: Cache-op for build-cache through ccache
      uses: actions/cache@v2
      with:
        path: ${{ env.ccache_dir }}
        key: ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
        restore-keys: |-
          ccache
          ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
          ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}
          ccache-${{ github.job }}
    - name: ccache environment setup
      run: |-
        echo "CCACHE_COMPILER_CHECK=${{ env.cache_cmd }}" >> $GITHUB_ENV
        echo "CCACHE_BASE_DIR=${{ github.workspace }}" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
        echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=50M" >> $GITHUB_ENV
    - name: ccache prolog
      run: |-
        ccache -s # Print current cache stats
        ccache -z # Zero cache entry
    - name: cmake
      run: |-
        mkdir -p build
        cd build
        CC=/usr/bin/gcc-${{ env.gcc }} CXX=/usr/bin/g++-${{ env.gcc }} CUDAHOSTCXX=/usr/bin/g++-${{ env.gcc }} \
        cmake -L .. ${{ env.cmake }}
    - name: Build from source
      working-directory: build
      run: make -j2
    - name: ccache epilog
      run: 'ccache -s # Print current cache stats'
    - name: Print Versions
      working-directory: build
      run: ./app/bergamot-translator-app --version
    - name: Run unit tests
      working-directory: build
      run: make test
      if: ${{ env.unittests }} == 'true'
    - name: Install regression-test framework (BRT)
      working-directory: bergamot-translator-tests
      run: make install
    - name: Run regression-tests (BRT)
      working-directory: bergamot-translator-tests
      run: MARIAN=../build ./run_brt.sh ${{ env.brt_tags }}
    - name: Upload regression-tests artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: brt-${{ github.job }}
        path: |-
          bergamot-translator-tests/**/*.expected
          bergamot-translator-tests/**/*.log
          bergamot-translator-tests/**/*.out
  ubuntu_minimal_fresh:
    name: Ubuntu minimal (fresh build)
    env:
      gcc: 8
      cmake: -DCOMPILE_TESTS=off -DUSE_WASM_COMPATIBLE_SOURCE=on
      brt_tags: "'#wasm'"
      unittests: ${{ false }}
    runs-on: ubuntu-18.04
    if: ${{ needs.ubuntu_minimal.result }} == 'failure'
    needs: ubuntu_minimal
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: |-
        sudo apt-get update
        sudo apt-get install -y \
          libgoogle-perftools-dev libprotobuf-dev protobuf-compiler \
          libboost-all-dev g++-${{ env.gcc }} ccache
    - name: Install MKL
      run: |-
        wget -qO- "https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB" | sudo apt-key add -
        sudo sh -c "echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get update -o Dir::Etc::sourcelist="/etc/apt/sources.list.d/intel-mkl.list"
        sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088
    - name: cmake
      run: |-
        mkdir -p build
        cd build
        CC=/usr/bin/gcc-${{ env.gcc }} CXX=/usr/bin/g++-${{ env.gcc }} CUDAHOSTCXX=/usr/bin/g++-${{ env.gcc }} \
        cmake -L .. ${{ env.cmake }}
    - name: Build from source
      working-directory: build
      run: make -j2
    - name: Print Versions
      working-directory: build
      run: ./app/bergamot-translator-app --version
    - name: Run unit tests
      working-directory: build
      run: make test
      if: ${{ env.unittests }} == 'true'
    - name: Install regression-test framework (BRT)
      working-directory: bergamot-translator-tests
      run: make install
    - name: Run regression-tests (BRT)
      working-directory: bergamot-translator-tests
      run: MARIAN=../build ./run_brt.sh ${{ env.brt_tags }}
    - name: Upload regression-tests artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: brt-${{ github.job }}
        path: |-
          bergamot-translator-tests/**/*.expected
          bergamot-translator-tests/**/*.log
          bergamot-translator-tests/**/*.out
  mac_full:
    name: MacOS full
    env:
      cmake: -DCOMPILE_TESTS=on -DUSE_APPLE_ACCELERATE=off -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
      brt_tags: "'#mac'"
      unittests: ${{ true }}
      ccache_dir: "${{ github.workspace }}/.ccache"
      cache_cmd: "bash ${GITHUB_WORKSPACE}/scripts/ci/compiler-hash.sh %compiler%"
    runs-on: macos-10.15
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: |-
        brew update
        brew install openblas protobuf coreutils ccache
    - name: Setup BLAS
      run: |-
        echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV
    - name: Generate ccache_vars for ccache based on machine
      shell: bash
      id: ccache_vars
      run: |-
        echo "::set-output name=hash::$(${{ env.cache_cmd }})"
        echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"
    - name: Cache-op for build-cache through ccache
      uses: actions/cache@v2
      with:
        path: ${{ env.ccache_dir }}
        key: ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
        restore-keys: |-
          ccache
          ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
          ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}
          ccache-${{ github.job }}
    - name: ccache environment setup
      run: |-
        echo "CCACHE_COMPILER_CHECK=${{ env.cache_cmd }}" >> $GITHUB_ENV
        echo "CCACHE_BASE_DIR=${{ github.workspace }}" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
        echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=50M" >> $GITHUB_ENV
    - name: ccache prolog
      run: |-
        ccache -s # Print current cache stats
        ccache -z # Zero cache entry
    - name: cmake
      run: |-
        mkdir -p build
        cd build
        cmake -L .. ${{ env.cmake }}
    - name: Build from source
      working-directory: build
      run: make -j2
    - name: ccache epilog
      run: 'ccache -s # Print current cache stats'
    - name: Print Versions
      working-directory: build
      run: ./app/bergamot-translator-app --version
    - name: Run unit tests
      working-directory: build
      run: make test
      if: ${{ env.unittests }} == 'true'
    - name: Install regression-test framework (BRT)
      working-directory: bergamot-translator-tests
      run: make install
    - name: Run regression-tests (BRT)
      working-directory: bergamot-translator-tests
      run: MARIAN=../build ./run_brt.sh ${{ env.brt_tags }}
    - name: Upload regression-tests artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: brt-${{ github.job }}
        path: |-
          bergamot-translator-tests/**/*.expected
          bergamot-translator-tests/**/*.log
          bergamot-translator-tests/**/*.out
  mac_full_fresh:
    name: MacOS full (fresh build)
    env:
      cmake: -DCOMPILE_TESTS=on -DUSE_APPLE_ACCELERATE=off
      brt_tags: "'#mac'"
      unittests: ${{ true }}
    runs-on: macos-10.15
    if: ${{ needs.mac_full.result }} == 'failure'
    needs: mac_full
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: |-
        brew update
        brew install openblas protobuf coreutils ccache
    - name: Setup BLAS
      run: |-
        echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV
    - name: cmake
      run: |-
        mkdir -p build
        cd build
        cmake -L .. ${{ env.cmake }}
    - name: Build from source
      working-directory: build
      run: make -j2
    - name: Print Versions
      working-directory: build
      run: ./app/bergamot-translator-app --version
    - name: Run unit tests
      working-directory: build
      run: make test
      if: ${{ env.unittests }} == 'true'
    - name: Install regression-test framework (BRT)
      working-directory: bergamot-translator-tests
      run: make install
    - name: Run regression-tests (BRT)
      working-directory: bergamot-translator-tests
      run: MARIAN=../build ./run_brt.sh ${{ env.brt_tags }}
    - name: Upload regression-tests artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: brt-${{ github.job }}
        path: |-
          bergamot-translator-tests/**/*.expected
          bergamot-translator-tests/**/*.log
          bergamot-translator-tests/**/*.out
  mac_minimal:
    name: MacOS minimal
    env:
      cmake: -DCOMPILE_TESTS=off -DUSE_APPLE_ACCELERATE=off -DUSE_WASM_COMPATIBLE_SOURCE=on -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
      brt_tags: "'#wasm'"
      unittests: ${{ false }}
      ccache_dir: "${{ github.workspace }}/.ccache"
      cache_cmd: "bash ${GITHUB_WORKSPACE}/scripts/ci/compiler-hash.sh %compiler%"
    runs-on: macos-10.15
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: |-
        brew update
        brew install openblas protobuf coreutils ccache
    - name: Setup BLAS
      run: |-
        echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV
    - name: Generate ccache_vars for ccache based on machine
      shell: bash
      id: ccache_vars
      run: |-
        echo "::set-output name=hash::$(${{ env.cache_cmd }})"
        echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"
    - name: Cache-op for build-cache through ccache
      uses: actions/cache@v2
      with:
        path: ${{ env.ccache_dir }}
        key: ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
        restore-keys: |-
          ccache
          ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
          ccache-${{ github.job }}-${{ steps.ccache_vars.outputs.hash }}
          ccache-${{ github.job }}
    - name: ccache environment setup
      run: |-
        echo "CCACHE_COMPILER_CHECK=${{ env.cache_cmd }}" >> $GITHUB_ENV
        echo "CCACHE_BASE_DIR=${{ github.workspace }}" >> $GITHUB_ENV
        echo "CCACHE_COMPRESS=true" >> $GITHUB_ENV
        echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=50M" >> $GITHUB_ENV
    - name: ccache prolog
      run: |-
        ccache -s # Print current cache stats
        ccache -z # Zero cache entry
    - name: cmake
      run: |-
        mkdir -p build
        cd build
        cmake -L .. ${{ env.cmake }}
    - name: Build from source
      working-directory: build
      run: make -j2
    - name: ccache epilog
      run: 'ccache -s # Print current cache stats'
    - name: Print Versions
      working-directory: build
      run: ./app/bergamot-translator-app --version
    - name: Run unit tests
      working-directory: build
      run: make test
      if: ${{ env.unittests }} == 'true'
    - name: Install regression-test framework (BRT)
      working-directory: bergamot-translator-tests
      run: make install
    - name: Run regression-tests (BRT)
      working-directory: bergamot-translator-tests
      run: MARIAN=../build ./run_brt.sh ${{ env.brt_tags }}
    - name: Upload regression-tests artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: brt-${{ github.job }}
        path: |-
          bergamot-translator-tests/**/*.expected
          bergamot-translator-tests/**/*.log
          bergamot-translator-tests/**/*.out
  mac_minimal_fresh:
    name: MacOS minimal (fresh build)
    env:
      cmake: -DCOMPILE_TESTS=off -DUSE_APPLE_ACCELERATE=off -DUSE_WASM_COMPATIBLE_SOURCE=on
      brt_tags: "'#wasm'"
      unittests: ${{ false }}
    runs-on: macos-10.15
    if: ${{ needs.mac_minimal.result }} == 'failure'
    needs: mac_minimal
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install Dependencies
      run: |-
        brew update
        brew install openblas protobuf coreutils ccache
    - name: Setup BLAS
      run: |-
        echo "LDFLAGS=-L/usr/local/opt/openblas/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/openblas/include" >> $GITHUB_ENV
    - name: cmake
      run: |-
        mkdir -p build
        cd build
        cmake -L .. ${{ env.cmake }}
    - name: Build from source
      working-directory: build
      run: make -j2
    - name: Print Versions
      working-directory: build
      run: ./app/bergamot-translator-app --version
    - name: Run unit tests
      working-directory: build
      run: make test
      if: ${{ env.unittests }} == 'true'
    - name: Install regression-test framework (BRT)
      working-directory: bergamot-translator-tests
      run: make install
    - name: Run regression-tests (BRT)
      working-directory: bergamot-translator-tests
      run: MARIAN=../build ./run_brt.sh ${{ env.brt_tags }}
    - name: Upload regression-tests artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: brt-${{ github.job }}
        path: |-
          bergamot-translator-tests/**/*.expected
          bergamot-translator-tests/**/*.log
          bergamot-translator-tests/**/*.out

